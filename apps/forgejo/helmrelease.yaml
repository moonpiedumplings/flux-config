---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: forgejo
  namespace: forgejo
spec:
  chart:
    spec:
      chart: forgejo
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: forgejo
  interval: 1m0s
  values:
    postgresql-ha:
      enabled: false
    postgresql:
      enabled: true
      global:
        postgresql:
          auth:
            # see https://artifacthub.io/packages/helm/bitnami/postgresql
            database: forgejo
            username: forgejo
            existingSecret: forgejo-postgres-bitnami-secret
        primary:
          persistence:
            enabled: true
    valkey-cluster:
      enabled: false
    valkey:
      enabled: true
      auth:
        # see https://github.com/bitnami/charts/blob/main/bitnami/valkey/values.yaml
        existingSecret: forgejo-valkey-bitnami-secret
        existingSecretPasswordKey: password
      primary:
        persistence:
          enabled: true
        
    persistence:
      enabled: true
    service:
      # ssh:
      # Defaults to clusterip service with port 22
      http:
        type: ClusterIP
    gitea:
      admin:
        existingSecret: forgejo-admin-secret
        # In the secret
        # username:
        # password: 
      oauth:
        - name: 'Authentik'
          provider: openidConnect
          existingSecret: forgejo-oauth-secret
          autoDiscoverUrl: "https://sso.moonpiedumpl.ing/application/o/forgejo/.well-known/openid-configuration"
          iconUrl: https://cdn.jsdelivr.net/gh/selfhst/icons/png/authentik.png
          # Not documented at all
          # I am just guessing from: https://github.com/DennisRasey/forgejo/blob/0c7612bca430896d240a51ed231cb2922d579114/cmd/admin_auth_oauth_test.go#L56
          group-team-map: '{"layer8": {"layer8": ["members"]}, "admins": {"layer8": ["Owners"]}}'
          group-team-map-removal: true
          group-claim-name: groups
          admin-group: admins
          # Authentik includes groups in the profile scope, but many other oauth2 providers do not. You may need a "groups" scope added.
          scopes: "email profile"
      config:
        server:
          DOMAIN: "forgejo.moonpiedumpl.ing"
          ROOT_URL: "https://forgejo.moonpiedumpl.ing"
        repository:
          PREFERRED_LICENSES: AGPL-3.0-or-later
          DEFAULT_PRIVATE: public
          GO_GET_CLONE_URL_PROTOCOL: ssh
        service:
          # Disable to force login via OIDC.
          ENABLE_INTERNAL_SIGNIN: false
          ALLOW_ONLY_EXTERNAL_REGISTRATION: true
          DEFAULT_KEEP_EMAIL_PRIVATE: true
        # So apparently, oauth, openid, and ouath2_client are 3 seperate things
        # oauth: Oauth provider, for authenticating other apps to forgejo, like a git client
        # openid: For a shared identity system, simialar to federation, that lets anybody with an openid server sign in with that
        # oauth2_client: Client that utilizes explicit providers to sign in. Also, is capable of group mapping or making users admins
        ouath:
          ENABLED: true
        openid:
          ENABLE_OPENID_SIGNIN: false
          ENABLE_OPENID_SIGNUP: false
        oauth2_client:
          REGISTER_EMAIL_CONFIRM: false
          ENABLE_AUTO_REGISTRATION: true
          UPDATE_AVATAR: true
          ACCOUNT_LINKING: auto
          USERNAME: nickname
        indexer:
          ISSUE_INDEXER_TYPE: bleve
          REPO_INDEXER_ENABLED: true
          REPO_INDEXER_TYPE: bleve
          REPO_INDEXER_REPO_TYPES: "sources,forks,mirrors,templates"
        admin:
          EXTERNAL_USER_DISABLE_FEATURES: "deletion"
        database:
          DB_TYPE: postgres
          HOST: forgejo-postgresql.forgejo.svc.cluster.local:5432
          USER: forgejo
          NAME: forgejo
          SSL_MODE: disable
          # In the secret
          # PASSWD: password
        cache:
          ADAPTER: redis
          # In the secret
          # HOST: redis://:password@forgejo-valkey-primary.forgejo.svc.cluster.local:6379?pool_size=100&idle_timeout=180s
        queue:
          TYPE: redis
          # In the secret, same as redis host above
          # CONN_STR: 
        session:
          PROVIDER: redis
          # In the secret
          # PROVIDER_CONFIG: 
      additionalConfigFromEnvs:
        - name: FORGEJO__DATABASE__PASSWD
          valueFrom:
            secretKeyRef:
              name: forgejo-db-secret
              key: databasePassword
        - name: FORGEJO__CACHE__HOST
          valueFrom:
            secretKeyRef:
              name: forgejo-db-secret
              key: cacheHost
        - name: FORGEJO__QUEUE__CONN_STR
          valueFrom:
            secretKeyRef:
              name: forgejo-db-secret
              key: cacheHost
        - name: FORGEJO__SESSION__PROVIDER_CONFIG
          valueFrom:
            secretKeyRef:
              name: forgejo-db-secret
              key: cacheHost

    